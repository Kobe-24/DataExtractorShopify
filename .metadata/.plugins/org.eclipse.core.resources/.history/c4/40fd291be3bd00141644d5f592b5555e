package ShopifyAPI;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.net.URLCodec;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.json.JSONException;

import JsonParser.JsonParser;
import Logger.Logger;

public class ShopifyAPIClient {

	private CredentialShopify credential;
	
	private Logger logger;
	
	public ShopifyAPIClient(CredentialShopify cred, Logger myLogger)
	{
		this.credential = cred;
		this.logger = myLogger;
	}
	
	public List<String> getOrders() throws ClientProtocolException, IOException	
	{
		this.logger.Log("*************** Connecting to Shopify ***************");
		
		String url = GetOrdersURL();
		//String url = GetURL();
		
		this.logger.Log("URL: " + url);
		
		
		// Time out set to 30 seconds
		int timeoutInSeconds = 30;
		RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(timeoutInSeconds * 1000).setConnectionRequestTimeout(timeoutInSeconds * 1000).build();
		
		HttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();
		HttpGet request = new HttpGet(url);
			 
		HttpResponse response = client.execute(request);
		
		int statusCode = response.getStatusLine().getStatusCode();
		if (statusCode == 200)
		{
			this.logger.Log("Response Code : " 
	                + response.getStatusLine().getStatusCode() + " (Good)");
		}
		else
		{
			this.logger.Log("Response Code : " 
	                + response.getStatusLine().getStatusCode() + " (Not good)");
		}		
		
		BufferedReader rd = new BufferedReader(
			new InputStreamReader(response.getEntity().getContent()));
	 
		StringBuffer result = new StringBuffer();
		String line = "";
		while ((line = rd.readLine()) != null) {
			result.append(line);
		}				
		
		String resultAsString = result.toString();
		
		List<String> parsedResult = parseResult(resultAsString);
		
		return parsedResult;
		
	}

	private List<String> parseResult(String resultAsString) {
		List<String> parsedResult = new ArrayList<String>();
		JsonParser parser = new JsonParser();
		try {
			//parsedResult = parser.getProducts(resultAsString);
			parsedResult = parser.getJson(resultAsString);
		} catch (JSONException e) {
			logger.Log("Error parsing from JSON: " + e.getMessage());			
		}
		return parsedResult;
	}
	
	
	private String GetURL()
	{
		return "https://" + credential.getApiKey() + ":" + credential.getPassword() + "@" + credential.getShopName() + 
				".myshopify.com/admin/products.json";
	}
	
	private String GetOrdersURL()
	{
		
		String toReturn = "";
		String test = "?status=closed&created_at_min=2015-01-01T00:00:00%2B01:00&created_at_max=2015-01-31T12:59:59%2B01:00";		
	    
		return "https://" + credential.getApiKey() + ":" + credential.getPassword() + "@" + credential.getShopName() +
			".myshopify.com/admin/orders.json" + test;
		
	}
	
}
